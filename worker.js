// Cloudflare Worker - Backend do SAAS Developer AI (SYSTEM PROMPTS OTIMIZADOS)
export default {
  async fetch(request, env) {
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };

    // Lidar com preflight OPTIONS
    if (request.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders });
    }

    // ‚ö†Ô∏è CORRE√á√ÉO CR√çTICA: Verificar m√©todo POST PRIMEIRO
    if (request.method === 'POST') {
      return await handleChatRequest(request, env, corsHeaders);
    }

    // Health check apenas para GET
    if (request.method === 'GET') {
      return new Response(
        JSON.stringify({
          message: 'üöÄ SAAS Developer AI API - Cloudflare Workers',
          status: 'online',
          timestamp: new Date().toISOString()
        }),
        { 
          status: 200,
          headers: { 
            ...corsHeaders, 
            'Content-Type': 'application/json' 
          }
        }
      );
    }

    // Rota n√£o encontrada
    return new Response(
      JSON.stringify({ error: 'M√©todo n√£o permitido' }),
      { 
        status: 405,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
};

// Fun√ß√£o principal para lidar com requests do chat
async function handleChatRequest(request, env, corsHeaders) {
  try {
    // ‚ö†Ô∏è DEBUG: Verificar se API Key est√° carregada
    console.log('üîë API Key carregada?:', !!env.DEEPSEEK_API_KEY);
    console.log('üîë API Key tamanho:', env.DEEPSEEK_API_KEY?.length);
    
    const data = await request.json();
    const { message, options, language, isConsultor } = data;

    // Validar dados
    if (!message || message.trim() === '') {
      return new Response(
        JSON.stringify({ error: 'Message is required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('üì¶ Recebido request:', { 
      message: message.substring(0, 50) + '...',
      language, 
      isConsultor 
    });

    // Construir prompt baseado nas op√ß√µes e modo
    const prompt = buildPrompt(message, options, language, isConsultor);
    
    const messages = [
      {
        role: "system",
        content: getSystemPrompt(isConsultor, language)
      },
      { role: "user", content: prompt }
    ];

    console.log('üì§ Prompt constru√≠do');

    const responseText = await callDeepSeekAPI(messages, env.DEEPSEEK_API_KEY);

    // ‚ö†Ô∏è VERIFICA√á√ÉO MELHORADA
    console.log('ü§ñ Resposta DeepSeek recebida, tamanho:', responseText?.length);
    
    if (!responseText || typeof responseText !== 'string' || responseText.trim() === '') {
      console.error('‚ùå Resposta vazia da API DeepSeek');
      throw new Error('Resposta vazia da API DeepSeek');
    }

    return new Response(
      JSON.stringify({ 
        response: responseText,
        codeId: `#${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`,
        success: true
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('‚ùå Erro em handleChatRequest:', error.message);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        response: `‚ùå Erro: ${error.message}`,
        success: false
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
}

// Fun√ß√£o para construir prompt baseado nas op√ß√µes
function buildPrompt(userMessage, options, language, isConsultor) {
  if (isConsultor) {
    return `MODO CONSULTOR ATIVADO - APENAS EXPLICA√á√ïES TE√ìRICAS

Solicita√ß√£o: ${userMessage}

REGRAS ESTRITAS:
‚Ä¢ Forne√ßa APENAS explica√ß√µes te√≥ricas e conceituais
‚Ä¢ C√≥digos apenas como exemplos ilustrativos MUITO curtos (m√°ximo 3-5 linhas)
‚Ä¢ NUNCA gere c√≥digo completo ou funcional
‚Ä¢ Foque em conceitos, fundamentos e boas pr√°ticas
‚Ä¢ Seja did√°tico e detalhista
‚Ä¢ Use analogias quando apropriado
‚Ä¢ Explique o "porqu√™" por tr√°s dos conceitos

Responda em portugu√™s de forma clara e educada.`;
  }

  // Verificar se apenas c√≥digo foi selecionado
  const selectedOptions = Object.entries(options || {})
    .filter(([_, selected]) => selected)
    .map(([key]) => key);

  // Se s√≥ c√≥digo foi selecionado - APENAS C√ìDIGO
  if (selectedOptions.length === 1 && options.code) {
    return `Gere APENAS o c√≥digo ${language} para: ${userMessage}. 

N√ÉO inclua:
- Explica√ß√µes
- Instru√ß√µes de uso 
- Melhorias
- Exemplos adicionais
- Qualquer texto al√©m do c√≥digo

Apenas o c√≥digo puro e funcional.`;
  }

  // Se nenhuma op√ß√£o selecionada, padr√£o para c√≥digo
  if (selectedOptions.length === 0) {
    return `Gere APENAS o c√≥digo ${language} para: ${userMessage}. 

N√ÉO inclua explica√ß√µes, instru√ß√µes de uso, melhorias, exemplos ou qualquer texto adicional. Apenas o c√≥digo puro.`;
  }

  // Se m√∫ltiplas op√ß√µes selecionadas
  let prompt = `Instru√ß√£o: ${userMessage}\n\n`;
  
  if (language) {
    prompt += `Linguagem: ${language}\n\n`;
  }
  
  prompt += `Forne√ßa SOMENTE:\n`;

  if (options.code) prompt += `‚Ä¢ C√≥digo completo e funcional (em blocos de c√≥digo)\n`;
  if (options.explanation) prompt += `‚Ä¢ Explica√ß√£o detalhada do que foi implementado\n`;
  if (options.usage) prompt += `‚Ä¢ Instru√ß√µes claras de como usar\n`;
  if (options.improvements) prompt += `‚Ä¢ Poss√≠veis melhorias e extens√µes\n`;

  prompt += `\n\nN√ÉO inclua nada al√©m do que foi solicitado acima.`;

  return prompt;
}

// ‚ö†Ô∏è FUN√á√ÉO CRITICAMENTE MELHORADA: System prompts especializados por linguagem
function getSystemPrompt(isConsultor, language) {
  if (isConsultor) {
    return "Voc√™ √© um consultor t√©cnico s√™nior especializado em programa√ß√£o. Forne√ßa APENAS explica√ß√µes te√≥ricas e conceituais. C√≥digos apenas como exemplos curtos ilustrativos. Seja did√°tico, detalhista e focado em fundamentos.";
  }

  // SYSTEM PROMPTS ESPECIALIZADOS POR LINGUAGEM
  switch (language) {
    case 'mq5':
      return `Voc√™ √© um desenvolvedor ESPECIALISTA S√äNIOR em MQL5 para MetaTrader 5.

REGRAS ESTRITAS PARA MQL5:
‚Ä¢ SEMPRE consulte a documenta√ß√£o oficial mais recente do MQL5
‚Ä¢ Use apenas fun√ß√µes e estruturas VALIDADAS da documenta√ß√£o oficial
‚Ä¢ C√≥digo deve seguir as conven√ß√µes EXATAS da plataforma MetaTrader 5
‚Ä¢ Implemente tratamento de erros robusto (OrderSend, CopyBuffer, etc.)
‚Ä¢ Use handles de indicadores CORRETAMENTE (iMA, iRSI, etc.)
‚Ä¢ Sempre inclua #property strict para compila√ß√£o rigorosa
‚Ä¢ Verifique retornos de todas as fun√ß√µes da API MQL5
‚Ä¢ Use PositionGetTicket() e PositionGetInteger() CORRETAMENTE
‚Ä¢ Implemente gerenciamento de risco (Stop Loss, Take Profit)
‚Ä¢ Use SymbolInfoDouble() para obter pre√ßos atuais
‚Ä¢ Trate adequadamente os arrays (ArraySetAsSeries)

DOCUMENTA√á√ÉO OFICIAL:
- https://www.mql5.com/en/docs
- Use a refer√™ncia mais atualizada da linguagem

NUNCA use fun√ß√µes depreciadas ou incorretas. Sempre valide seu c√≥digo com a documenta√ß√£o oficial.`;

    case 'ntsl':
      return `Voc√™ √© um desenvolvedor ESPECIALISTA S√äNIOR em NTSL para ProfitChart da Nelogica.

REGRAS ESTRITAS PARA NTSL:
‚Ä¢ SEMPRE consulte a documenta√ß√£o oficial da Nelogica
‚Ä¢ Use a sintaxe EXATA baseada em C++ da plataforma ProfitChart
‚Ä¢ Implemente fun√ß√µes de trading espec√≠ficas da Nelogica
‚Ä¢ Use as bibliotecas e fun√ß√µes nativas da plataforma
‚Ä¢ Siga as conven√ß√µes de codifica√ß√£o da Nelogica
‚Ä¢ Implemente tratamento de erros adequado
‚Ä¢ Use os tipos de dados espec√≠ficos do NTSL

DOCUMENTA√á√ÉO OFICIAL:
- Consulte o manual oficial da Nelogica ProfitChart
- Use as refer√™ncias mais atualizadas da plataforma

Garanta que o c√≥digo seja compat√≠vel com a vers√£o mais recente do ProfitChart.`;

    case 'python':
      return `Voc√™ √© um desenvolvedor Python S√äNIOR especializado em c√≥digo limpo e eficiente.

REGRAS PARA PYTHON:
‚Ä¢ Use Python 3.8+ com type hints
‚Ä¢ Siga PEP 8 rigorosamente
‚Ä¢ Implemente tratamento de exce√ß√µes adequado
‚Ä¢ Use estruturas de dados Pythonicas
‚Ä¢ Documente com docstrings
‚Ä¢ Escreva c√≥digo test√°vel e modular`;

    case 'javascript':
      return `Voc√™ √© um desenvolvedor JavaScript/Node.js S√äNIOR especializado em c√≥digo moderno.

REGRAS PARA JAVASCRIPT:
‚Ä¢ Use ES6+ (arrow functions, destructuring, async/await)
‚Ä¢ Siga as melhores pr√°ticas de Node.js
‚Ä¢ Implemente error handling robusto
‚Ä¢ Use promises/async-await adequadamente
‚Ä¢ Escreva c√≥digo limpo e funcional`;

    case 'typescript':
      return `Voc√™ √© um desenvolvedor TypeScript S√äNIOR especializado em tipagem forte.

REGRAS PARA TYPESCRIPT:
‚Ä¢ Use TypeScript 4.0+ com strict mode
‚Ä¢ Defina interfaces e tipos precisos
‚Ä¢ Use generics quando apropriado
‚Ä¢ Siga as melhores pr√°ticas de type safety
‚Ä¢ Implemente tipagem para todas as fun√ß√µes`;

    case 'java':
      return `Voc√™ √© um desenvolvedor Java S√äNIOR especializado em c√≥digo empresarial.

REGRAS PARA JAVA:
‚Ä¢ Use Java 11+ com features modernas
‚Ä¢ Siga conven√ß√µes de nomenclatura Java
‚Ä¢ Implemente tratamento de exce√ß√µes completo
‚Ä¢ Use OOP principles adequadamente
‚Ä¢ Escreva c√≥digo limpo e documentado`;

    case 'cpp':
      return `Voc√™ √© um desenvolvedor C++ S√äNIOR especializado em c√≥digo de alta performance.

REGRAS PARA C++:
‚Ä¢ Use C++17/20 com features modernas
‚Ä¢ Implemente memory management seguro
‚Ä¢ Use smart pointers quando apropriado
‚Ä¢ Siga as guidelines do C++ Core Guidelines
‚Ä¢ Escreva c√≥digo eficiente e seguro`;

    case 'go':
      return `Voc√™ √© um desenvolvedor Go (Golang) S√äNIOR especializado em c√≥digo concorrente.

REGRAS PARA GO:
‚Ä¢ Use Go 1.19+ com features modernas
‚Ä¢ Siga as conven√ß√µes Go (error handling, packages)
‚Ä¢ Implemente concorr√™ncia com goroutines adequadamente
‚Ä¢ Use interfaces e structs corretamente
‚Ä¢ Escreva c√≥digo idiom√°tico Go`;

    case 'rust':
      return `Voc√™ √© um desenvolvedor Rust S√äNIOR especializado em memory safety.

REGRAS PARA RUST:
‚Ä¢ Use Rust 2021 edition
‚Ä¢ Implemente ownership e borrowing corretamente
‚Ä¢ Use Result e Option adequadamente
‚Ä¢ Siga as conven√ß√µes de Rust
‚Ä¢ Escreva c√≥digo seguro e eficiente`;

    default:
      return `Voc√™ √© um desenvolvedor s√™nior especializado em ${language || 'm√∫ltiplas linguagens'}.
Gere c√≥digo limpo, bem documentado, funcional e seguindo as melhores pr√°ticas da linguagem.
Sempre consulte a documenta√ß√£o oficial mais recente e implemente tratamento de erros robusto.`;
  }
}

// Fun√ß√£o para chamar a API DeepSeek
async function callDeepSeekAPI(messages, apiKey) {
  console.log('üîë Iniciando chamada para DeepSeek...');
  
  // Verificar se a API Key est√° configurada
  if (!apiKey || apiKey.trim() === '' || apiKey === 'sua_chave_aqui') {
    console.error('‚ùå API Key inv√°lida ou n√£o configurada');
    throw new Error('API Key da DeepSeek n√£o configurada. Verifique a vari√°vel DEEPSEEK_API_KEY no Cloudflare.');
  }

  console.log('üåê Chamando API DeepSeek...');
  
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 30000);

  try {
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'deepseek-coder',
        messages: messages,
        temperature: 0.7,
        max_tokens: 4000,
        stream: false
      }),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    console.log(`üì° Status da resposta DeepSeek: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API DeepSeek:', errorText);
      
      let errorMessage = `Erro DeepSeek: ${response.status}`;
      
      if (response.status === 401) {
        errorMessage = 'API Key inv√°lida ou expirada. Verifique sua chave DeepSeek.';
      } else if (response.status === 429) {
        errorMessage = 'Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.';
      } else if (response.status === 500) {
        errorMessage = 'Erro interno do servidor DeepSeek. Tente novamente.';
      }
      
      throw new Error(errorMessage);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta DeepSeek recebida com sucesso');
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Estrutura inv√°lida da resposta:', data);
      throw new Error('Resposta inv√°lida da API DeepSeek');
    }

    const responseContent = data.choices[0].message.content;
    
    if (!responseContent || responseContent.trim() === '') {
      throw new Error('Resposta vazia da API DeepSeek');
    }

    return responseContent;

  } catch (error) {
    clearTimeout(timeoutId);
    
    if (error.name === 'AbortError') {
      throw new Error('Timeout: A requisi√ß√£o levou mais de 30 segundos. Tente novamente.');
    }
    
    console.error('üí• Erro na chamada DeepSeek:', error);
    throw error;
  }
}